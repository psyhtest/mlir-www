<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on MLIR</title><link>https://mlir.llvm.org/docs/Tools/</link><description>Recent content in Tools on MLIR</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://mlir.llvm.org/docs/Tools/index.xml" rel="self" type="application/rss+xml"/><item><title>linalg_opdsl tool</title><link>https://mlir.llvm.org/docs/Tools/LinalgOpDsl/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Tools/LinalgOpDsl/</guid><description>Python based DSL for authoring Linalg op definitions and generating linalg.generic IR based on them for samples.
The tool linalg_opdsl provides a high level DSL for constructing structured op definitions in a way that can be exported to built-in, named structured ops via the above YAML-based definitions or used interactively to emit corresponding linalg.generic IR for the composition.
Basic usage The tool is bundled with the MLIR Python bindings. To use from the CMake build tree, MLIR must be build with Python bindings enabled (-DMLIR_BINDINGS_PYTHON_ENABLED=ON).</description></item><item><title>MLIR : Language Server Protocol</title><link>https://mlir.llvm.org/docs/Tools/MLIRLSP/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Tools/MLIRLSP/</guid><description>MLIR LSP Language Server : mlir-lsp-server Supporting custom dialects and passes Design Editor Plugins Visual Studio Code This document describes the tools and utilities related to supporting LSP IDE language extensions for the MLIR textual assembly format. An LSP language extension is generally comprised of two components; a language client and a language server. A language client is a piece of code that interacts with the IDE that you are using, such as VSCode.</description></item></channel></rss>